buildscript {
    repositories {
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        def kotlin_frontend_plugin_version = "0.0.27"
        def gradle_node_plugin_version = "1.2.0"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:" + kotlin_frontend_plugin_version
        classpath "com.moowork.gradle:gradle-node-plugin:" + gradle_node_plugin_version
    }
}

apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlin2js'
apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'com.moowork.node'

node {
    download = true
}
compileKotlin2Js.kotlinOptions.moduleKind = "commonjs"

kotlinFrontend {
    downloadNodeJsVersion = 'latest'
    npm {
        dependency("react", "16.2.0")
        dependency("react-dom", "16.2.0")
        devDependency("webpack-cli", "2.0.10")
    }
    webpackBundle {
        bundleName = "bundle"
        sourceMapEnabled = true
        publicPath = "/"
        port = 3000
        stats = "verbose"
    }
}

task buildBundle(type: NpmTask, dependsOn: [npmInstall, runDceKotlinJs]) {
    args = ["run", "bundle"]
}

task copyStatic {
    copy {
        from "src/main/static"
        into 'build'
    }
}

assemble.dependsOn(buildBundle, copyStatic)
run.dependsOn(copyStatic)

repositories {
    maven { url "https://kotlin.bintray.com/kotlin-js-wrappers" }
}

dependencies {
    compile project(":multiplat-workshop-js")
    expectedBy project(":multiplat-workshop-client")

    compile "org.jetbrains:kotlin-extensions:$js_wrappers_version"
    compile "org.jetbrains:kotlin-react:$react_wrapper_version"
    compile "org.jetbrains:kotlin-react-dom:$react_wrapper_version"

    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
